prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix vann: <http://purl.org/vocab/vann/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix binding: <https://www.w3.org/2019/wot/binding#> 
prefix hctl: <https://www.w3.org/2019/wot/hypermedia#> 
prefix sh: <http://www.w3.org/ns/shacl#> 
prefix : <http://w3c.github.io/wot-binding-templates/mappings#>


template :modbus {
    format {
        <file://./bindings/modbus/index.template.html>
        st:call-template(:formTerms, ?modbusBase, ?prefix)
        st:call-template(:entityValues, ?modbusBase, ?prefix)
        st:call-template(:codeValues, ?modbusBase, ?prefix)
        st:call-template(:nameValues, ?modbusBase, ?prefix)
         st:call-template(:mappings, ?modbusBase, ?prefix)
    }
}  where {
    ?mappings a owl:Ontology ;
        owl:imports ?modbusBase .
    ?modbusBase a owl:Ontology;
       vann:preferredNamespacePrefix ?prefix
}

template :formTerms(?ns ?prefix){
    format {
        """
        <tr>
            <td><code>%s</code></td>
            <td>%s</td>
            <td>%s</td>
            <td><a href=\"%s\">%s</a></td>

        <tr>
        """
        replace(?term,concat(?ns,"#"),concat(?prefix,":"),"g")
        ?desc
        if(?count > 0, "required","optional")
        if(strstarts(?type,str(?ns)), lcase(replace(?type, ?ns,"","g")),?type )
        strafter(?type,"#")

    }
} where {
    ?shape a sh:NodeShape ;
        sh:targetClass hctl:Form ;
        sh:order 1 ;
        sh:property ?property.
    
    ?property sh:path ?term .
    ?term rdfs:comment ?desc .
    optional {
        ?property sh:minCount ?count 
    }
    optional {
        ?property sh:class ?type
    }
    optional {
        ?property sh:datatype ?type
    }
    
    BIND ( IF (BOUND (?count), ?count, 0 )  as ?count  )
   
} 

template :mappings(?ns ?prefix){
    format {
        """
        <tr>
            <td><code>%s</code></td>
            <td><code>\"%s\": \"%s\"</code></td>
        <tr>
        """
        lcase(strafter(?operation,"#"))
        replace(?modbusFunction,concat(?ns,"#"),concat(?prefix,":"),"g")
        strafter(?default,"#")
    }
} where {
    ?shape a sh:NodeShape ;
        sh:targetClass hctl:Form ;
        sh:order ?index ;
        sh:property ?operationProperty;
        sh:property ?defaultValueProperty.
   
   ?operationProperty sh:path hctl:hasOperationType;
        sh:hasValue ?operation.
					  
   ?defaultValueProperty  sh:path ?modbusFunction;
        sh:defaultValue ?default.
   
   filter( ?index > 1 )
    bind(IRI(CONCAT(STR( ?ns),"#function")) as ?modbusFunction)
}

template :entityValues(?ns ?prefix){
    format {
        """
        <tr>
            <td><code>%s</code></td>
            <td>%s</td>
        <tr>
        """
        strafter(?op,"#")
        ?desc
       
    }
}where {
     ?op rdf:type ?entity;
         rdf:type  owl:NamedIndividual;
         rdfs:label ?label;
         rdfs:comment ?desc
    
    bind(IRI(CONCAT(STR( ?ns),"#Entity")) as ?entity)
}

template :codeValues(?ns ?prefix){
    format {
        """
        <tr>
            <td><code>%s</code></td>
            <td>%s</td>
            <td>%s</td>
        <tr>
        """
        strafter(?op,"#")
        ?label
        ?desc
       
    }
}where {
     ?op rdf:type ?funcode;
         rdf:type  owl:NamedIndividual;
         rdfs:label ?label;
         rdfs:comment ?desc
    
    bind(IRI(CONCAT(STR( ?ns),"#FunctionCode")) as ?funcode)
}

template :nameValues(?ns ?prefix){
    format {
        """
        <tr>
            <td><code>%s</code></td>
            <td><code>%s</code</td>
            <td>%s</td>
        <tr>
        """
        strafter(?op,"#")
        strafter(?code,"#")
        ?desc
       
    }
}where {
     ?op rdf:type ?funcode;
         rdf:type  owl:NamedIndividual;
         rdfs:label ?label;
         rdfs:comment ?desc;
         ?funcodeProp ?code
    
    bind(IRI(CONCAT(STR( ?ns),"#FunctionName")) as ?funcode)
    bind(IRI(CONCAT(STR( ?ns),"#functionCode")) as ?funcodeProp)
}
